# -*- coding: utf-8 -*-
"""Mortality_DW_Creation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WUOJsEFGvj7ItgxjJoKr41pezB4_dtMm
"""

# ✅ Instalar dependencias
#!pip install pandas sqlalchemy openpyxl

import pandas as pd
from sqlalchemy import create_engine

# ✅ Cargar archivos desde carpeta /content
file_mortalidad = "/content/NoFetal2019.xlsx"
file_codigos = "/content/CodigosDeMuerte.xlsx"
file_divipola = "/content/Divipola_CE_.xlsx"

df_mortalidad = pd.read_excel(file_mortalidad)
df_codigos_raw = pd.read_excel(file_codigos, skiprows=8)
df_divipola = pd.read_excel(file_divipola)

# ✅ Transformar Códigos CIE-10 (dim_causa)
df_codigos = df_codigos_raw[[
    "Código de la CIE-10 cuatro caracteres",
    "Código de la CIE-10 tres caracteres",
    "Descripcion  de códigos mortalidad a cuatro caracteres"
]].drop_duplicates()
df_codigos.columns = ["codigo", "codigo_cie10_tres_caracteres","descripcion"]

# No cambiar nombres, solo seleccionar lo necesario
df_divipola = df_divipola[["COD_DANE", "COD_DEPARTAMENTO","DEPARTAMENTO", "COD_MUNICIPIO","MUNICIPIO"]].drop_duplicates()

# ✅ Transformar tiempo (dim_tiempo)
# Renombrar columnas AÑO y MES a lo que espera pd.to_datetime
df_tiempo = df_mortalidad[["AÑO", "MES", "HORA","MINUTOS"]].dropna().drop_duplicates()

# Calcular trimestre a partir del mes
df_tiempo["TRIMESTRE"] = ((df_tiempo["MES"] - 1) // 3 + 1).astype(int)

# Reorganizar columnas
df_tiempo = df_tiempo[["AÑO", "MES", "TRIMESTRE","HORA","MINUTOS"]]

# ✅ Guardar dimensiones en SQLite
engine = create_engine("sqlite:///mortality_dw.db")

df_codigos.to_sql("dim_causa", engine, if_exists="replace", index=False)
df_divipola.to_sql("dim_ubicacion", engine, if_exists="replace", index=False)
df_tiempo.to_sql("dim_tiempo", engine, if_exists="replace", index=False)

# 1. Crear mapeos para códigos de 4 y 3 caracteres
map_cod4 = df_codigos.set_index("codigo")["descripcion"].to_dict()
map_cod3 = df_codigos.set_index("codigo_cie10_tres_caracteres")["descripcion"].to_dict()

# 2. Preparar columna de 3 caracteres en df_mortalidad
df_mortalidad["CODIGO_CIE10_3C"] = df_mortalidad["COD_MUERTE"].astype(str).str[:3]

# 3. Asignar descripción: primero con código completo, luego con 3 caracteres si no existe
df_mortalidad["DESCRIPCION_CIE10"] = df_mortalidad["COD_MUERTE"].map(map_cod4)
df_mortalidad["DESCRIPCION_CIE10"] = df_mortalidad["DESCRIPCION_CIE10"].fillna(
    df_mortalidad["CODIGO_CIE10_3C"].map(map_cod3)
)

# 4. Leer la dimensión de ubicación
dim_ubicacion = pd.read_sql("""
    SELECT COD_DANE, COD_DEPARTAMENTO, DEPARTAMENTO, MUNICIPIO, COD_MUNICIPIO
    FROM dim_ubicacion
""", engine)

# 5. Unir con df_mortalidad
df = df_mortalidad.merge(dim_ubicacion, on="COD_DANE", how="left")

# 6. Resolver columnas duplicadas si existen
df = df.rename(columns={
    "COD_DEPARTAMENTO_y": "COD_DEPARTAMENTO",
    "COD_MUNICIPIO_y": "COD_MUNICIPIO"
})
df = df.drop(columns=["COD_DEPARTAMENTO_x", "COD_MUNICIPIO_x"], errors='ignore')

# 7. Crear df_hechos incluyendo CODIGO_CIE10_3C
df_hechos = df[[
    "AÑO", "MES", "HORA", "MINUTOS", "GRUPO_EDAD1", "SEXO",
    "COD_MUERTE", "CODIGO_CIE10_3C", "DESCRIPCION_CIE10",
    "COD_DANE", "COD_DEPARTAMENTO", "COD_MUNICIPIO"
]].copy()

# 8. Renombrar columnas finales
df_hechos.columns = [
    "AÑO", "MES", "HORA", "MINUTOS", "EDAD", "SEXO",
    "CODIGO_CIE10", "CODIGO_CIE10_3C", "DESCRIPCION_CIE10",
    "COD_DANE", "COD_DEPARTAMENTO", "COD_MUNICIPIO"
]

# 9. Reorganizar columnas finales
df_hechos = df_hechos[[
    "AÑO", "MES", "HORA", "MINUTOS", "EDAD", "SEXO",
    "CODIGO_CIE10", "CODIGO_CIE10_3C", "DESCRIPCION_CIE10",
    "COD_DANE", "COD_DEPARTAMENTO", "COD_MUNICIPIO"
]]

# ✅ Guardar hechos
df_hechos.to_sql("hechos_mortalidad", engine, if_exists="replace", index=False)
print("✔ Data Warehouse cargado correctamente en mortality_dw.db")